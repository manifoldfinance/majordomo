/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface DictatorDAOInterface extends ethers.utils.Interface {
  functions: {
    "DELAY()": FunctionFragment;
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "GRACE_PERIOD()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "burn(address,uint256)": FunctionFragment;
    "burnFrom(address,address,uint256)": FunctionFragment;
    "cancelTransaction(address,uint256,bytes)": FunctionFragment;
    "decimals()": FunctionFragment;
    "executeTransaction(address,uint256,bytes)": FunctionFragment;
    "mint(uint256,address)": FunctionFragment;
    "name()": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "operator()": FunctionFragment;
    "pendingOperator()": FunctionFragment;
    "pendingOperatorTime()": FunctionFragment;
    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "queueTransaction(address,uint256,bytes)": FunctionFragment;
    "queuedTransactions(bytes32)": FunctionFragment;
    "setOperator(address)": FunctionFragment;
    "symbol()": FunctionFragment;
    "token()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "userVote(address)": FunctionFragment;
    "users(address)": FunctionFragment;
    "vote(address)": FunctionFragment;
    "votes(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "DELAY", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GRACE_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burnFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelTransaction",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "executeTransaction",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [string]): string;
  encodeFunctionData(functionFragment: "operator", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOperator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingOperatorTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "queueTransaction",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "queuedTransactions",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "setOperator", values: [string]): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "userVote", values: [string]): string;
  encodeFunctionData(functionFragment: "users", values: [string]): string;
  encodeFunctionData(functionFragment: "vote", values: [string]): string;
  encodeFunctionData(functionFragment: "votes", values: [string]): string;

  decodeFunctionResult(functionFragment: "DELAY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GRACE_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnFrom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "operator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingOperatorTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "queueTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queuedTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "users", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "votes", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "CancelTransaction(bytes32,address,uint256,bytes)": EventFragment;
    "ExecuteTransaction(bytes32,address,uint256,bytes)": EventFragment;
    "QueueTransaction(bytes32,address,uint256,bytes,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelTransaction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecuteTransaction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QueueTransaction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class DictatorDAO extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: DictatorDAOInterface;

  functions: {
    DELAY(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "DELAY()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    DOMAIN_SEPARATOR(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "DOMAIN_SEPARATOR()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    GRACE_PERIOD(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "GRACE_PERIOD()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "allowance(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balanceOf(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      balance: BigNumber;
      0: BigNumber;
    }>;

    "balanceOf(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      balance: BigNumber;
      0: BigNumber;
    }>;

    burn(
      to: string,
      shares: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "burn(address,uint256)"(
      to: string,
      shares: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    burnFrom(
      from: string,
      to: string,
      shares: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "burnFrom(address,address,uint256)"(
      from: string,
      to: string,
      shares: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    cancelTransaction(
      target: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "cancelTransaction(address,uint256,bytes)"(
      target: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    decimals(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "decimals()"(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    executeTransaction(
      target: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "executeTransaction(address,uint256,bytes)"(
      target: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    mint(
      amount: BigNumberish,
      operatorVote: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mint(uint256,address)"(
      amount: BigNumberish,
      operatorVote: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    name(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "name()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    nonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "nonces(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    operator(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "operator()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    pendingOperator(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "pendingOperator()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    pendingOperatorTime(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "pendingOperatorTime()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    permit(
      owner_: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner_: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    queueTransaction(
      target: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "queueTransaction(address,uint256,bytes)"(
      target: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    queuedTransactions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "queuedTransactions(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    setOperator(
      newOperator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setOperator(address)"(
      newOperator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    symbol(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "symbol()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    token(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "token()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    totalSupply(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "totalSupply()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    transfer(
      to: string,
      shares: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      to: string,
      shares: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      shares: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      shares: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    userVote(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "userVote(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    users(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      balance: BigNumber;
      lockedUntil: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "users(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      balance: BigNumber;
      lockedUntil: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    vote(
      operatorVote: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "vote(address)"(
      operatorVote: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    votes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "votes(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;
  };

  DELAY(overrides?: CallOverrides): Promise<BigNumber>;

  "DELAY()"(overrides?: CallOverrides): Promise<BigNumber>;

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<string>;

  GRACE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  "GRACE_PERIOD()"(overrides?: CallOverrides): Promise<BigNumber>;

  allowance(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balanceOf(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  burn(
    to: string,
    shares: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "burn(address,uint256)"(
    to: string,
    shares: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  burnFrom(
    from: string,
    to: string,
    shares: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "burnFrom(address,address,uint256)"(
    from: string,
    to: string,
    shares: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  cancelTransaction(
    target: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "cancelTransaction(address,uint256,bytes)"(
    target: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  executeTransaction(
    target: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "executeTransaction(address,uint256,bytes)"(
    target: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  mint(
    amount: BigNumberish,
    operatorVote: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mint(uint256,address)"(
    amount: BigNumberish,
    operatorVote: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "nonces(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  operator(overrides?: CallOverrides): Promise<string>;

  "operator()"(overrides?: CallOverrides): Promise<string>;

  pendingOperator(overrides?: CallOverrides): Promise<string>;

  "pendingOperator()"(overrides?: CallOverrides): Promise<string>;

  pendingOperatorTime(overrides?: CallOverrides): Promise<BigNumber>;

  "pendingOperatorTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  permit(
    owner_: string,
    spender: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
    owner_: string,
    spender: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  queueTransaction(
    target: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "queueTransaction(address,uint256,bytes)"(
    target: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  queuedTransactions(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "queuedTransactions(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setOperator(
    newOperator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setOperator(address)"(
    newOperator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  token(overrides?: CallOverrides): Promise<string>;

  "token()"(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    shares: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    to: string,
    shares: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    shares: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    from: string,
    to: string,
    shares: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  userVote(arg0: string, overrides?: CallOverrides): Promise<string>;

  "userVote(address)"(arg0: string, overrides?: CallOverrides): Promise<string>;

  users(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    balance: BigNumber;
    lockedUntil: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "users(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    balance: BigNumber;
    lockedUntil: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  vote(
    operatorVote: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "vote(address)"(
    operatorVote: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  votes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "votes(address)"(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    "DELAY()"(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<string>;

    GRACE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    "GRACE_PERIOD()"(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(
      to: string,
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "burn(address,uint256)"(
      to: string,
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    burnFrom(
      from: string,
      to: string,
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "burnFrom(address,address,uint256)"(
      from: string,
      to: string,
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    cancelTransaction(
      target: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "cancelTransaction(address,uint256,bytes)"(
      target: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    executeTransaction(
      target: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "executeTransaction(address,uint256,bytes)"(
      target: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    mint(
      amount: BigNumberish,
      operatorVote: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "mint(uint256,address)"(
      amount: BigNumberish,
      operatorVote: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "nonces(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    operator(overrides?: CallOverrides): Promise<string>;

    "operator()"(overrides?: CallOverrides): Promise<string>;

    pendingOperator(overrides?: CallOverrides): Promise<string>;

    "pendingOperator()"(overrides?: CallOverrides): Promise<string>;

    pendingOperatorTime(overrides?: CallOverrides): Promise<BigNumber>;

    "pendingOperatorTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      owner_: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner_: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    queueTransaction(
      target: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "queueTransaction(address,uint256,bytes)"(
      target: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    queuedTransactions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "queuedTransactions(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setOperator(newOperator: string, overrides?: CallOverrides): Promise<void>;

    "setOperator(address)"(
      newOperator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    token(overrides?: CallOverrides): Promise<string>;

    "token()"(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      to: string,
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: string,
      to: string,
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    userVote(arg0: string, overrides?: CallOverrides): Promise<string>;

    "userVote(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    users(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      balance: BigNumber;
      lockedUntil: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "users(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      balance: BigNumber;
      lockedUntil: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    vote(operatorVote: string, overrides?: CallOverrides): Promise<boolean>;

    "vote(address)"(
      operatorVote: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    votes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "votes(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): EventFilter;

    CancelTransaction(
      txHash: BytesLike | null,
      target: string | null,
      value: null,
      data: null
    ): EventFilter;

    ExecuteTransaction(
      txHash: BytesLike | null,
      target: string | null,
      value: null,
      data: null
    ): EventFilter;

    QueueTransaction(
      txHash: BytesLike | null,
      target: string | null,
      value: null,
      data: null,
      eta: null
    ): EventFilter;

    Transfer(from: string | null, to: string | null, value: null): EventFilter;
  };

  estimateGas: {
    DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    "DELAY()"(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    GRACE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    "GRACE_PERIOD()"(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    balanceOf(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(
      to: string,
      shares: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "burn(address,uint256)"(
      to: string,
      shares: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    burnFrom(
      from: string,
      to: string,
      shares: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "burnFrom(address,address,uint256)"(
      from: string,
      to: string,
      shares: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    cancelTransaction(
      target: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "cancelTransaction(address,uint256,bytes)"(
      target: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    executeTransaction(
      target: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "executeTransaction(address,uint256,bytes)"(
      target: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    mint(
      amount: BigNumberish,
      operatorVote: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mint(uint256,address)"(
      amount: BigNumberish,
      operatorVote: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "nonces(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    operator(overrides?: CallOverrides): Promise<BigNumber>;

    "operator()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOperator(overrides?: CallOverrides): Promise<BigNumber>;

    "pendingOperator()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOperatorTime(overrides?: CallOverrides): Promise<BigNumber>;

    "pendingOperatorTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      owner_: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner_: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    queueTransaction(
      target: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "queueTransaction(address,uint256,bytes)"(
      target: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    queuedTransactions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "queuedTransactions(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setOperator(newOperator: string, overrides?: Overrides): Promise<BigNumber>;

    "setOperator(address)"(
      newOperator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    "token()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      shares: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      to: string,
      shares: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      shares: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      shares: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    userVote(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "userVote(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    users(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "users(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vote(operatorVote: string, overrides?: Overrides): Promise<BigNumber>;

    "vote(address)"(
      operatorVote: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    votes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "votes(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DELAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DELAY()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DOMAIN_SEPARATOR()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GRACE_PERIOD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "GRACE_PERIOD()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      to: string,
      shares: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "burn(address,uint256)"(
      to: string,
      shares: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    burnFrom(
      from: string,
      to: string,
      shares: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "burnFrom(address,address,uint256)"(
      from: string,
      to: string,
      shares: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    cancelTransaction(
      target: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cancelTransaction(address,uint256,bytes)"(
      target: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeTransaction(
      target: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "executeTransaction(address,uint256,bytes)"(
      target: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      amount: BigNumberish,
      operatorVote: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mint(uint256,address)"(
      amount: BigNumberish,
      operatorVote: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nonces(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    operator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "operator()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOperator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pendingOperator()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingOperatorTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pendingOperatorTime()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    permit(
      owner_: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner_: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    queueTransaction(
      target: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "queueTransaction(address,uint256,bytes)"(
      target: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    queuedTransactions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "queuedTransactions(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setOperator(
      newOperator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setOperator(address)"(
      newOperator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      shares: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      to: string,
      shares: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      shares: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      shares: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    userVote(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userVote(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    users(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "users(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vote(
      operatorVote: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "vote(address)"(
      operatorVote: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    votes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "votes(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
