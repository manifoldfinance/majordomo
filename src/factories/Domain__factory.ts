/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Domain, DomainInterface } from "../Domain";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
];

const _bytecode =
  "0x60c0604052348015600f57600080fd5b504660a0819052601d816025565b6080525060d3565b60007f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a794692188230604051602001605a93929190608b565b604051602081830303815290604052805190602001209050919050565b607e8160b5565b82525050565b607e8160c4565b60608101609782866084565b60a260208301856084565b60ad60408301846077565b949350505050565b600060be8260c7565b92915050565b90565b6001600160a01b031690565b60805160a05160166100ea600039505060166000f3fe6080604052600080fdfea164736f6c634300060c000a";

type DomainConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DomainConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Domain__factory extends ContractFactory {
  constructor(...args: DomainConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Domain> {
    return super.deploy(overrides || {}) as Promise<Domain>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Domain {
    return super.attach(address) as Domain;
  }
  connect(signer: Signer): Domain__factory {
    return super.connect(signer) as Domain__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DomainInterface {
    return new utils.Interface(_abi) as DomainInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Domain {
    return new Contract(address, _abi, signerOrProvider) as Domain;
  }
}
