/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { PromiseOrValue } from "../../common";
import type { Greeter, GreeterInterface } from "../../contracts/Greeter";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "admin",
        type: "address",
      },
      {
        internalType: "string",
        name: "_greeting",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "getAdmin",
    outputs: [
      {
        internalType: "address",
        name: "admin",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "greet",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newAdmin",
        type: "address",
      },
    ],
    name: "setAdmin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_greeting",
        type: "string",
      },
    ],
    name: "setGreeting",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_greeting",
        type: "string",
      },
    ],
    name: "setGreetingThatWorks",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000c8b38038062000c8b833981810160405260408110156200003757600080fd5b8151602083018051604051929492938301929190846401000000008211156200005f57600080fd5b9083019060208201858111156200007557600080fd5b82516401000000008111828201881017156200009057600080fd5b82525081516020918201929091019080838360005b83811015620000bf578181015183820152602001620000a5565b50505050905090810190601f168015620000ed5780820380516001836020036101000a031916815260200191505b50606081016040526022808252620001209450909250905062000c696020830139826200015d60201b6200055b1760201c565b8051620001359060009060208401906200029c565b5050600180546001600160a01b0319166001600160a01b039290921691909117905562000338565b620002778282604051602401808060200180602001838103835285818151815260200191508051906020019080838360005b83811015620001a95781810151838201526020016200018f565b50505050905090810190601f168015620001d75780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156200020c578181015183820152602001620001f2565b50505050905090810190601f1680156200023a5780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529190526020810180516001600160e01b03908116634b5c427760e01b179091529095506200027b169350505050565b5050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002df57805160ff19168380011785556200030f565b828001600101855582156200030f579182015b828111156200030f578251825591602001919060010190620002f2565b506200031d92915062000321565b5090565b5b808211156200031d576000815560010162000322565b61092180620003486000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80637f98d137116100505780637f98d137146100b8578063a41368621461015e578063cfae32171461020457610067565b80636e9960c31461006c578063704b6c0214610090575b600080fd5b610074610281565b604080516001600160a01b039092168252519081900360200190f35b6100b6600480360360208110156100a657600080fd5b50356001600160a01b0316610290565b005b6100b6600480360360208110156100ce57600080fd5b8101906020810181356401000000008111156100e957600080fd5b8201836020820111156100fb57600080fd5b8035906020019184600183028401116401000000008311171561011d57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610329945050505050565b6100b66004803603602081101561017457600080fd5b81019060208101813564010000000081111561018f57600080fd5b8201836020820111156101a157600080fd5b803590602001918460018302840111640100000000831117156101c357600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506103ed945050505050565b61020c6104c5565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561024657818101518382015260200161022e565b50505050905090810190601f1680156102735780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6001546001600160a01b031690565b6001546001600160a01b031633146102ef576040805162461bcd60e51b815260206004820152601460248201527f4e4f545f415554484f52495a45445f41444d494e000000000000000000000000604482015290519081900360640190fd5b600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6103d66040518060600160405280602381526020016108f2602391396000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103cb5780601f106103a0576101008083540402835291602001916103cb565b820191906000526020600020905b8154815290600101906020018083116103ae57829003601f168201915b505050505083610696565b80516103e990600090602084019061085e565b5050565b6104646040518060600160405280602381526020016108f2602391396000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103cb5780601f106103a0576101008083540402835291602001916103cb565b805161047790600090602084019061085e565b506040805162461bcd60e51b815260206004820152601660248201527f74657374696e67206572726f7220626c6f636b696e6700000000000000000000604482015290519081900360640190fd5b60008054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156105515780601f1061052657610100808354040283529160200191610551565b820191906000526020600020905b81548152906001019060200180831161053457829003601f168201915b5050505050905090565b6103e98282604051602401808060200180602001838103835285818151815260200191508051906020019080838360005b838110156105a457818101518382015260200161058c565b50505050905090810190601f1680156105d15780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156106045781810151838201526020016105ec565b50505050905090810190601f1680156106315780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f4b5c427700000000000000000000000000000000000000000000000000000000179052945061083d9350505050565b61083883838360405160240180806020018060200180602001848103845287818151815260200191508051906020019080838360005b838110156106e45781810151838201526020016106cc565b50505050905090810190601f1680156107115780820380516001836020036101000a031916815260200191505b50848103835286518152865160209182019188019080838360005b8381101561074457818101518382015260200161072c565b50505050905090810190601f1680156107715780820380516001836020036101000a031916815260200191505b50848103825285518152855160209182019187019080838360005b838110156107a457818101518382015260200161078c565b50505050905090810190601f1680156107d15780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f2ced7cef00000000000000000000000000000000000000000000000000000000179052965061083d95505050505050565b505050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061089f57805160ff19168380011785556108cc565b828001600101855582156108cc579182015b828111156108cc5782518255916020019190600101906108b1565b506108d89291506108dc565b5090565b5b808211156108d857600081556001016108dd56fe4368616e67696e67206772656574696e672066726f6d202725732720746f2027257327a164736f6c634300060c000a4465706c6f79696e67206120477265657465722077697468206772656574696e673a";

type GreeterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GreeterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Greeter__factory extends ContractFactory {
  constructor(...args: GreeterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    admin: PromiseOrValue<string>,
    _greeting: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Greeter> {
    return super.deploy(admin, _greeting, overrides || {}) as Promise<Greeter>;
  }
  override getDeployTransaction(
    admin: PromiseOrValue<string>,
    _greeting: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(admin, _greeting, overrides || {});
  }
  override attach(address: string): Greeter {
    return super.attach(address) as Greeter;
  }
  override connect(signer: Signer): Greeter__factory {
    return super.connect(signer) as Greeter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GreeterInterface {
    return new utils.Interface(_abi) as GreeterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Greeter {
    return new Contract(address, _abi, signerOrProvider) as Greeter;
  }
}
